const pizzas = [
  {
    id: 1,
    nombre: "pizza de Muzzarella",
    precio: 500,
    ingredientes: ["Muzzarella", "Tomate", "Aceitunas"],
    imagen: "./img/muzzarella.png",
  },

  {
    id: 2,
    nombre: "pizza de Cebolla",
    precio: 1500,
    ingredientes: ["Muzzarella", "Tomate", "Cebolla"],
    imagen: "./img/cebolla.png",
  },

  {
    id: 3,
    nombre: "pizza 4 Quesos",
    precio: 1380,
    ingredientes: [
      "Muzzarella",
      "Tomate",
      "Queso Azul",
      "Parmesano",
      "Roquefort",
    ],
    imagen: "./img/4quesos.png",
  },

  {
    id: 4,
    nombre: "pizza Especial",
    precio: 1000,
    ingredientes: ["Muzzarella", "Tomate", "Rucula", "Jam칩n"],
    imagen: "./img/especial.png",
  },

  {
    id: 5,
    nombre: "pizza con Anana",
    precio: 600,
    ingredientes: ["Muzzarella", "Tomate", "Anana"],
    imagen: "./img/anana.png",
  },
];

/*
El ejercicio que deber치n realizar es el siguiente:

游녤 Les dejamos como archivo adjunto la base para realizar el ejercicio, en la cual tendr치n el html y css vac칤os , una carpeta img y el index.js que tendr치 el nuevo array de pizzas, en donde cada pizza tendr치 una propiedad imagen adem치s de las propiedades que ten칤a en el ejercicio anterior.

游녤 Crear un archivo HTML que tenga un input de tipo "number", un bot칩n y un contenedor en el cual renderizar el resultado de la b칰squeda que se haga. 

游녤 Al apretar el bot칩n , deber치n capturar el valor ingresado en el input (Que ser치 un n칰mero) mediante el evento "submit" si est치n usando un formulario o bien el evento "click" si quieren manejarlo desde el bot칩n.

游녤 Si el n칰mero ingresado en el input es valido(existe una pizza cuyo id coincida con el n칰mero ingresado en el input), se deber치 renderizar en el contenedor una card con los datos de la pizza cuyo id coincida con el n칰mero ingresado en el input. La card deber치 contener m칤nimamente el nombre, imagen y y precio de la pizza (Estilizarlo con CSS 游꿛) 

游뚿 Si el n칰mero ingresado no coincide con ning칰n id, renderizar (no sirve un alert) un mensaje de error en el contenedor. 
游뚿 Si no se ingresa un n칰mero, renderizar (no sirve un alert) un mensaje de error diferente en el contenedor. 
游뚿 Solo debe renderizarse una 칰nica cosa , ya sea la nueva pizza, o el nuevo mensaje de error. El resto del contenido de nuestro contenedor se deber치 pisar por lo nuevo.

El input y el bot칩n no se deb칠n pisar, ya que debemos poder seguir haciendo busquedas.
*/

const pizzaImg = document.querySelector(".pizza-img");
const numberInput = document.querySelector(".pizza-number-input");
const form = document.querySelector(".search-pizza-form");
const errorField = document.querySelector("small");
const pizzaCard = document.querySelector(".pizza-card");

// Funciones

const isEmpty = (input) => {
  return !input.value.trim().length;
};

const idFound = (input) => {
  return pizzas.some((pizza) => pizza.id == parseInt(input.value.trim()));
};

const getPizzaId = (input) => {
  return pizzas.find((pizza) => {
    return pizza.id == parseInt(input.value.trim());
  });
};

const showError = (message) => {
  pizzaCard.innerHTML = `<h3>${message}</h3>`;
};

const isValid = () => {
  let valid = false;
  if (isEmpty(numberInput)) {
    showError("El campo no puede estar vac칤o");
    return;
  }
  if (!idFound(numberInput)) {
    showError("No se encontr칩 una pizza con ese id");
    return;
  }
  valid = true;
  return valid;
};

const search = (e) => {
  e.preventDefault();
  if (isValid()) {
    const pizza = getPizzaId(numberInput);
    pizzaImg.style.opacity = "1";
    pizzaImg.src = pizza.imagen;
    pizzaCard.style.display = "block";
    pizzaCard.classList.remove("error");
    pizzaCard.innerHTML = `<h3>${pizza.nombre}</h3>
    <h3>$${pizza.precio}</h3>`;
  } else {
    pizzaCard.style.display = "block";
    pizzaCard.classList.add("error");
    pizzaImg.style.opacity = "0";
  }
};

// Funcion inicializadora

const init = () => {
  form.addEventListener("submit", search);
};
init();
